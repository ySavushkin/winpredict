Index: project/predictwin_funcs.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import requests\r\nimport tkinter as tk\r\nfrom tkinter import ttk\r\nimport csv\r\n\r\n\r\nclass PredictWinFuncs:\r\n    def __init__(self, root, ui):\r\n        self.root = root\r\n        self.ui = ui\r\n        self.heroes = self.fetch_heroes()\r\n        self.selected_heroes = {'light': [], 'dark': []}\r\n        self.selected_hero_ids = {'light': [], 'dark': []}\r\n        self.selected_roles = {'light': [], 'dark': []}\r\n        self.selected_team = None\r\n        self.hero_roles = self.load_hero_roles()\r\n\r\n    def fetch_heroes(self):\r\n        response = requests.get(\"https://api.opendota.com/api/heroes\")\r\n        response.raise_for_status()\r\n        heroes_data = response.json()\r\n        return {hero['localized_name']: hero['id'] for hero in heroes_data}\r\n\r\n    def load_hero_roles(self):\r\n        hero_roles = {}\r\n        with open('full_hero_scores.csv', newline='', encoding='utf-8') as file:\r\n            reader = csv.DictReader(file)\r\n            for row in reader:\r\n                hero_roles[row['Hero']] = {\r\n                    'Carry': int(row['Carry']),\r\n                    'Mid': int(row['Mid']),\r\n                    'Offlane': int(row['Offlane']),\r\n                    'Support': int(row['Support']),\r\n                    'Hard Support': int(row['Hard Support'])\r\n                }\r\n        return hero_roles\r\n\r\n    def create_hero_selection_window(self):\r\n        self.hero_window = tk.Toplevel(self.root)\r\n        self.hero_window.title(\"Вибір героїв\")\r\n\r\n        window_width = 630\r\n        window_height = 800\r\n\r\n        screen_width = self.root.winfo_screenwidth()\r\n        screen_height = self.root.winfo_screenheight()\r\n\r\n        x_position = (screen_width // 2) - (window_width // 2)\r\n        y_position = (screen_height // 2) - (window_height // 2)\r\n\r\n        self.hero_window.geometry(f\"{window_width}x{window_height}+{x_position}+{y_position}\")\r\n\r\n        tk.Label(self.hero_window, text=\"Сила Світла\").grid(row=0, column=0, padx=10, pady=5)\r\n        self.light_team_inputs = []\r\n        self.create_team_inputs('light', 0)\r\n\r\n        tk.Label(self.hero_window, text=\"Сила Темряви\").grid(row=0, column=1, padx=10, pady=5)\r\n        self.dark_team_inputs = []\r\n        self.create_team_inputs('dark', 1)\r\n\r\n        button_row = 7\r\n        self.calculate_button = tk.Button(self.hero_window, text=\"Розрахувати ймовірність перемоги\",\r\n                                          command=self.calculate_win_rates)\r\n        self.calculate_button.grid(row=button_row, column=0, columnspan=2, pady=20)\r\n\r\n        self.results_text = tk.Text(self.hero_window, width=60, height=23)\r\n        self.results_text.grid(row=button_row + 1, column=0, columnspan=2, padx=10, pady=10)\r\n        self.results_text.config(state=tk.DISABLED)\r\n\r\n    def create_team_inputs(self, team, column):\r\n        for i in range(5):\r\n            frame = tk.Frame(self.hero_window)\r\n            frame.grid(row=i + 2, column=column, padx=10, pady=5)\r\n\r\n            entry = ttk.Entry(frame, width=20)\r\n            entry.pack(side=tk.LEFT)\r\n\r\n            role_combobox = ttk.Combobox(frame, values=[\"Carry\", \"Mid\", \"Offlane\", \"Support\", \"Hard Support\"], width=15)\r\n            role_combobox.set(\"Carry\")\r\n            role_combobox.pack(side=tk.LEFT, padx=(5, 0))\r\n\r\n            suggestions = tk.Listbox(frame, width=30, height=3)\r\n            suggestions.pack(side=tk.LEFT, padx=(5, 0))\r\n            suggestions.bind(\"<<ListboxSelect>>\", lambda event, e=entry, s=suggestions, t=team, r=role_combobox: self.on_hero_select(event, e, s, t, r))\r\n            suggestions.pack_forget()\r\n\r\n            entry.bind(\"<KeyRelease>\", lambda event, e=entry, s=suggestions: self.update_suggestions(e, s))\r\n            entry.bind(\"<FocusIn>\", lambda event, s=suggestions: s.pack(side=tk.LEFT, padx=(5, 0)))\r\n            entry.bind(\"<FocusOut>\", lambda event, s=suggestions: s.pack_forget())\r\n\r\n            if team == 'light':\r\n                self.light_team_inputs.append((entry, suggestions, role_combobox))\r\n            else:\r\n                self.dark_team_inputs.append((entry, suggestions, role_combobox))\r\n\r\n    def update_suggestions(self, entry, suggestions):\r\n        typed_text = entry.get().lower()\r\n        suggestions.delete(0, tk.END)\r\n\r\n        if not typed_text:\r\n            return\r\n\r\n        for hero_name in self.heroes:\r\n            if typed_text in hero_name.lower() and hero_name not in self.selected_heroes['light'] + self.selected_heroes['dark']:\r\n                suggestions.insert(tk.END, hero_name)\r\n\r\n    def on_hero_select(self, event, entry, suggestions, team, role_combobox):\r\n        selection = suggestions.curselection()\r\n        if not selection:\r\n            return\r\n\r\n        selected = suggestions.get(selection).split(' - ')[0]\r\n        entry.delete(0, tk.END)\r\n        entry.insert(0, selected)\r\n\r\n        if selected not in self.selected_heroes[team]:\r\n            self.selected_heroes[team].append(selected)\r\n            self.selected_hero_ids[team].append(self.heroes[selected])\r\n            selected_role = role_combobox.get()\r\n            self.selected_roles[team].append((selected, selected_role))\r\n\r\n        self.clear_other_suggestions()\r\n\r\n    def clear_other_suggestions(self):\r\n        for inputs in (self.light_team_inputs, self.dark_team_inputs):\r\n            for _, suggestions, _ in inputs:\r\n                suggestions.delete(0, tk.END)\r\n\r\n    def calculate_win_rates(self):\r\n        if len(self.selected_heroes['light']) != 5 or len(self.selected_heroes['dark']) != 5:\r\n            self.results_text.config(state=tk.NORMAL)\r\n            self.results_text.delete(1.0, tk.END)\r\n            self.results_text.insert(tk.END, \"Оберіть 5 героїв для кожної команди.\\n\")\r\n            self.results_text.config(state=tk.DISABLED)\r\n            return\r\n\r\n        results = {\r\n            \"Легка лінія\": {\"light\": 0, \"dark\": 0},\r\n            \"Середня лінія\": {\"light\": 0, \"dark\": 0},\r\n            \"Складна лінія\": {\"light\": 0, \"dark\": 0}\r\n        }\r\n\r\n        light_roles = {\r\n            \"Carry\": self.selected_heroes['light'][0],\r\n            \"Hard Support\": self.selected_heroes['light'][4],\r\n            \"Mid\": self.selected_heroes['light'][1],\r\n            \"Offlane\": self.selected_heroes['light'][2],\r\n            \"Support\": self.selected_heroes['light'][3]\r\n        }\r\n\r\n        dark_roles = {\r\n            \"Carry\": self.selected_heroes['dark'][0],\r\n            \"Hard Support\": self.selected_heroes['dark'][4],\r\n            \"Mid\": self.selected_heroes['dark'][1],\r\n            \"Offlane\": self.selected_heroes['dark'][2],\r\n            \"Support\": self.selected_heroes['dark'][3]\r\n        }\r\n\r\n        line_matchups = {\r\n            \"Легка лінія\": [(\"Carry\", \"Offlane\"), (\"Carry\", \"Support\"), (\"Hard Support\", \"Offlane\"), (\"Hard Support\", \"Support\")],\r\n            \"Середня лінія\": [(\"Mid\", \"Mid\")],\r\n            \"Складна лінія\": [(\"Offlane\", \"Carry\"), (\"Offlane\", \"Hard Support\"), (\"Support\", \"Carry\"), (\"Support\", \"Hard Support\")]\r\n        }\r\n\r\n        detailed_results = []\r\n        midgame_results = {\"light\": 0, \"dark\": 0}\r\n\r\n        for line, matchups in line_matchups.items():\r\n            for light_role, dark_role in matchups:\r\n                light_hero_name = light_roles[light_role]\r\n                dark_hero_name = dark_roles[dark_role]\r\n\r\n                light_hero_id = self.heroes[light_hero_name]\r\n                dark_hero_id = self.heroes[dark_hero_name]\r\n\r\n                try:\r\n                    response = requests.get(f\"https://api.opendota.com/api/heroes/{light_hero_id}/matchups\")\r\n                    response.raise_for_status()\r\n                    matchups_data = response.json()\r\n\r\n                    matchup = next((m for m in matchups_data if m[\"hero_id\"] == dark_hero_id), None)\r\n                    if matchup:\r\n                        win_rate = matchup[\"wins\"] / matchup[\"games_played\"] * 100\r\n\r\n                        light_role_factor = self.hero_roles[light_hero_name][light_role]\r\n                        dark_role_factor = self.hero_roles[dark_hero_name][dark_role]\r\n\r\n                        adjusted_win_rate = self.adjusted_win_probability(win_rate / 100, light_role_factor, dark_role_factor)\r\n\r\n                        detailed_results.append(f\"{light_hero_name} ({light_role}) має {adjusted_win_rate * 100:.2f}% ймовірності перемоги проти {dark_hero_name} ({dark_role})\\n\")\r\n\r\n                        if adjusted_win_rate > 0.5:\r\n                            results[line][\"light\"] += adjusted_win_rate\r\n                        else:\r\n                            results[line][\"dark\"] += (1 - adjusted_win_rate)\r\n\r\n                        # Midgame contribution\r\n                        midgame_results[\"light\"] += adjusted_win_rate\r\n                        midgame_results[\"dark\"] += (1 - adjusted_win_rate)\r\n\r\n                except requests.exceptions.RequestException as e:\r\n                    print(f\"Помилка запиту даних для героя {light_hero_id}: {e}\")\r\n\r\n        self.results_text.config(state=tk.NORMAL)\r\n        self.results_text.delete(1.0, tk.END)\r\n\r\n        self.results_text.insert(tk.END, \"\\n\".join(detailed_results) + \"\\n\\n\")\r\n\r\n        for line, scores in results.items():\r\n            light_score = scores[\"light\"] / len(line_matchups[line]) * 100\r\n            dark_score = scores[\"dark\"] / len(line_matchups[line]) * 100\r\n\r\n            if light_score > dark_score:\r\n                self.results_text.insert(tk.END, f\"{line} Сили Світла має більше шансів на перемогу на лайнінгу ({light_score:.2f}%).\\n\")\r\n            else:\r\n                self.results_text.insert(tk.END, f\"{line} Сили Темряви має більше шансів на перемогу на лайнінгу ({dark_score:.2f}%).\\n\")\r\n\r\n        # Midgame results\r\n        total_light_midgame = midgame_results[\"light\"] / sum(len(v) for v in line_matchups.values()) * 100\r\n        total_dark_midgame = midgame_results[\"dark\"] / sum(len(v) for v in line_matchups.values()) * 100\r\n\r\n        self.results_text.insert(tk.END, \"\\nРезультати мідгейму:\\n\")\r\n        if total_light_midgame > total_dark_midgame:\r\n            self.results_text.insert(tk.END, f\"Сили Світла мають більше шансів на перемогу у мідгеймі ({total_light_midgame:.2f}%).\\n\")\r\n        else:\r\n            self.results_text.insert(tk.END, f\"Сили Темряви мають більше шансів на перемогу у мідгеймі ({total_dark_midgame:.2f}%).\\n\")\r\n\r\n        # Midgame detailed results\r\n        midgame_detailed_results = []\r\n\r\n        for light_hero_name in light_roles.values():\r\n            for dark_hero_name in dark_roles.values():\r\n                light_hero_id = self.heroes[light_hero_name]\r\n                dark_hero_id = self.heroes[dark_hero_name]\r\n\r\n                try:\r\n                    response = requests.get(f\"https://api.opendota.com/api/heroes/{light_hero_id}/matchups\")\r\n                    response.raise_for_status()\r\n                    matchups_data = response.json()\r\n\r\n                    matchup = next((m for m in matchups_data if m[\"hero_id\"] == dark_hero_id), None)\r\n                    if matchup:\r\n                        win_rate = matchup[\"wins\"] / matchup[\"games_played\"] * 100\r\n\r\n                        midgame_detailed_results.append(\r\n                            f\"{light_hero_name} має {win_rate:.2f}% ймовірності перемоги проти {dark_hero_name}\\n\"\r\n                        )\r\n\r\n                except requests.exceptions.RequestException as e:\r\n                    print(f\"Помилка запиту даних для героя {light_hero_id}: {e}\")\r\n\r\n        self.results_text.insert(tk.END, \"\\nДеталізовані результати мідгейму:\\n\")\r\n        self.results_text.insert(tk.END, \"\\n\".join(midgame_detailed_results) + \"\\n\\n\")\r\n        self.results_text.config(state=tk.DISABLED)\r\n\r\n    def adjusted_win_probability(self, base_win_rate, light_role_factor, dark_role_factor):\r\n        return base_win_rate * light_role_factor / (base_win_rate * light_role_factor + (1 - base_win_rate) * dark_role_factor)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/predictwin_funcs.py b/project/predictwin_funcs.py
--- a/project/predictwin_funcs.py	(revision deb0259ae4b9516b6c03c6cd2388851bd9312539)
+++ b/project/predictwin_funcs.py	(date 1734341923119)
@@ -2,6 +2,7 @@
 import tkinter as tk
 from tkinter import ttk
 import csv
+import random
 
 
 class PredictWinFuncs:
@@ -253,5 +254,36 @@
         self.results_text.insert(tk.END, "\n".join(midgame_detailed_results) + "\n\n")
         self.results_text.config(state=tk.DISABLED)
 
+        # Late game with comeback system
+        light_late_game = midgame_results["light"]
+        dark_late_game = midgame_results["dark"]
+        error_chance = 0.1
+        error_impact = 10
+
+        if abs(light_late_game - dark_late_game) > 5:
+            if light_late_game > dark_late_game:
+                if random.random() < error_chance:
+                    light_late_game -= error_impact
+                    print(f"Ошибка команды Света: light_late_game = {light_late_game}")  # Для отладки
+            else:
+                if random.random() < error_chance:
+                    dark_late_game -= error_impact
+                    print(f"Ошибка команды Темрявы: dark_late_game = {dark_late_game}")  # Для отладки
+
+        # Ограничьте результат от 0 до 100
+        light_late_game = max(0, min(100, light_late_game))
+        dark_late_game = max(0, min(100, dark_late_game))
+
+        self.results_text.insert(tk.END, "\nРезультати лейтгейму:\n")
+        self.results_text.insert(tk.END, f"Сили Світла мають {light_late_game:.2f}% шансів на перемогу.\n")
+        self.results_text.insert(tk.END, f"Сили Темряви мають {dark_late_game:.2f}% шансів на перемогу.\n")
+
+        if light_late_game > dark_late_game:
+            self.results_text.insert(tk.END, f"Сили Світла мають більше шансів на перемогу ({light_late_game:.2f}%).\n")
+        else:
+            self.results_text.insert(tk.END, f"Сили Темряви мають більше шансів на перемогу ({dark_late_game:.2f}%).\n")
+        self.results_text.config(state=tk.DISABLED)
+
+
     def adjusted_win_probability(self, base_win_rate, light_role_factor, dark_role_factor):
         return base_win_rate * light_role_factor / (base_win_rate * light_role_factor + (1 - base_win_rate) * dark_role_factor)
